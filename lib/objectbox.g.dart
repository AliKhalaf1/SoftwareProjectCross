// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'models/Ticket_attendee.dart';
import 'models/auth.dart';
import 'models/event_promocode.dart';
import 'models/event_ticket.dart';
import 'models/liked_event_card_model.dart';
import 'models/order_class.dart';
import 'models/ticket_class.dart';
import 'models/user.dart';
import 'models/user_likes_event.dart';
import 'providers/events/event.dart';
import 'providers/tickets/ticket.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 6324978119880890039),
      name: 'Auth',
      lastPropertyId: const IdUid(5, 2163371784312554890),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 3532204531777365667),
            name: 'email',
            type: 9,
            flags: 2080,
            indexId: const IdUid(1, 862770701866512243)),
        ModelProperty(
            id: const IdUid(3, 7958771781219981162),
            name: 'password',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2163371784312554890),
            name: 'mockId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 4908252787234866678),
      name: 'User',
      lastPropertyId: const IdUid(9, 6398951864244722080),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(2, 590757566030278686),
            name: 'email',
            type: 9,
            flags: 2080,
            indexId: const IdUid(2, 2658527413851925650)),
        ModelProperty(
            id: const IdUid(3, 3338523289187129199),
            name: 'imageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3562410967619780751),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 7780287094472565681),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 6398951864244722080),
            name: 'mockId',
            type: 6,
            flags: 1)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(4, 5508452468500610366),
      name: 'Event',
      lastPropertyId: const IdUid(18, 1266951468127446804),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2016973110007611165),
            name: 'mockId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5082241329693792503),
            name: 'eventImg',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7102013250862503281),
            name: 'startDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 7693361993009473706),
            name: 'endDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4707418279590158048),
            name: 'description',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 4422311958945843855),
            name: 'isFav',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5968870262409536648),
            name: 'categ',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 4729164772389778561),
            name: 'tags',
            type: 30,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 4922030173832146386),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 9129872997020982913),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8334308235645515459),
            name: 'organization',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(14, 5082546397081466276),
            name: 'isOnline',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(15, 7035098969218285509),
            name: 'isPrivate',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(17, 2276175339021954406),
            name: 'creatorId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(18, 1266951468127446804),
            name: 'city',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(5, 5525868233582948149),
      name: 'EventPromocodeInfo',
      lastPropertyId: const IdUid(11, 8200120566905106095),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5353090562630431911),
            name: 'idMock',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 8874204976811063996),
            name: 'eventId',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 8537787467494088178),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6202859323255904156),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 4554966262323953210),
            name: 'isLimited',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7822562165760290474),
            name: 'availableAmount',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 2292175194532891018),
            name: 'isPercentage',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7732507031449238201),
            name: 'discount',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 7189591623872403922),
            name: 'startDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 7037553644394949172),
            name: 'endDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(11, 8200120566905106095),
            name: 'eventIdMock',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(6, 1036121604102249217),
      name: 'EventTicketInfo',
      lastPropertyId: const IdUid(9, 8380903954804700338),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2617638185035444333),
            name: 'idsMock',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 5577389383125447458),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6414532817814401601),
            name: 'type',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 4274468845780772557),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1656000154011148614),
            name: 'ticketPrice',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 143905716173355220),
            name: 'startDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 919807762122027255),
            name: 'endDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 7949049983805513831),
            name: 'avaliableQuantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8380903954804700338),
            name: 'selectedQuantity',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(7, 5006778671799004852),
      name: 'OrderClass',
      lastPropertyId: const IdUid(9, 1484872339254244293),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1363205073285178381),
            name: 'mockId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3696563734098677620),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5248274431100351281),
            name: 'eventId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 1493618381702173777),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 8240218852556847282),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6137228707766949008),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8184815880553137073),
            name: 'email',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5965597124020801364),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 1484872339254244293),
            name: 'creation_date',
            type: 10,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(8, 8447108209305675333),
      name: 'Ticket',
      lastPropertyId: const IdUid(4, 6392252427891117316),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1578563307946542357),
            name: 'mockId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7701539020685299918),
            name: 'eventImgUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 6857826401444694449),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6392252427891117316),
            name: 'title',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(9, 2329366862256821098),
      name: 'TicketAttendee',
      lastPropertyId: const IdUid(8, 8854794003904852627),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 1338969490856261255),
            name: 'mockId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4151188518359849841),
            name: 'eventid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1867367640587303365),
            name: 'orderid',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 352664110196945194),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5322786395524993649),
            name: 'isVip',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 1327959378613592614),
            name: 'firstName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 6182300656885291160),
            name: 'lastName',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8854794003904852627),
            name: 'email',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(10, 8200917204386437970),
      name: 'TicketClass',
      lastPropertyId: const IdUid(10, 2432142119261522732),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 6493710193710431440),
            name: 'mockId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 4400784480584213111),
            name: 'eventId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 2743590794565559488),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 6323664243603015038),
            name: 'isVip',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 3544129012850086409),
            name: 'price',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5838587001672269476),
            name: 'maxQuantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8590610926142522357),
            name: 'availableQuantity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 5311109087293239859),
            name: 'startDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 914962434125441347),
            name: 'endDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(10, 2432142119261522732),
            name: 'id',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(11, 3804690194136939675),
      name: 'UserLikesEvents',
      lastPropertyId: const IdUid(3, 4754277649475759083),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 431275727842209311),
            name: 'mockId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7058193668654788402),
            name: 'userId',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 4754277649475759083),
            name: 'eventId',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(12, 2067669968815746106),
      name: 'LikedEventCardModel',
      lastPropertyId: const IdUid(6, 7463573043435195910),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5705283141748395259),
            name: 'mockId',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 470352315121987329),
            name: 'id',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 1933707016045911043),
            name: 'title',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8536462134536752101),
            name: 'startDate',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1475975273384285378),
            name: 'eventImageUrl',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 7463573043435195910),
            name: 'isOnline',
            type: 1,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(12, 2067669968815746106),
      lastIndexId: const IdUid(3, 3425995927453799802),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [4293081377155789754],
      retiredIndexUids: const [],
      retiredPropertyUids: const [
        5488245486567488427,
        7100372381637242612,
        2312945438362267445,
        2799260197233414138,
        3470970142947361594,
        333485570223091719,
        3117369767745280882,
        6246247013999198138,
        2790287386267142519,
        1958398107393670290,
        3546888819780287214,
        4959833791218966225,
        6732839624408196016,
        2161200068858155801,
        7575698529104045696,
        1405378043978180903,
        447075717921643552,
        3214205458895062553,
        6493024197532204526,
        7073026940504869321,
        7895381826733041736
      ],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    Auth: EntityDefinition<Auth>(
        model: _entities[0],
        toOneRelations: (Auth object) => [],
        toManyRelations: (Auth object) => {},
        getId: (Auth object) => object.mockId,
        setId: (Auth object, int id) {
          object.mockId = id;
        },
        objectToFB: (Auth object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final passwordOffset = fbb.writeString(object.password);
          fbb.startTable(6);
          fbb.addOffset(1, emailOffset);
          fbb.addOffset(2, passwordOffset);
          fbb.addInt64(4, object.mockId);
          fbb.finish(fbb.endTable());
          return object.mockId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Auth(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''))
            ..mockId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);

          return object;
        }),
    User: EntityDefinition<User>(
        model: _entities[1],
        toOneRelations: (User object) => [],
        toManyRelations: (User object) => {},
        getId: (User object) => object.mockId,
        setId: (User object, int id) {
          object.mockId = id;
        },
        objectToFB: (User object, fb.Builder fbb) {
          final emailOffset = fbb.writeString(object.email);
          final imageUrlOffset = fbb.writeString(object.imageUrl);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          fbb.startTable(10);
          fbb.addOffset(1, emailOffset);
          fbb.addOffset(2, imageUrlOffset);
          fbb.addOffset(3, firstNameOffset);
          fbb.addOffset(4, lastNameOffset);
          fbb.addInt64(8, object.mockId);
          fbb.finish(fbb.endTable());
          return object.mockId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = User(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''))
            ..mockId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);

          return object;
        }),
    Event: EntityDefinition<Event>(
        model: _entities[2],
        toOneRelations: (Event object) => [],
        toManyRelations: (Event object) => {},
        getId: (Event object) => object.mockId,
        setId: (Event object, int id) {
          object.mockId = id;
        },
        objectToFB: (Event object, fb.Builder fbb) {
          final eventImgOffset = fbb.writeString(object.eventImg);
          final descriptionOffset = fbb.writeString(object.description);
          final categOffset = fbb.writeString(object.categ);
          final tagsOffset = fbb.writeList(
              object.tags.map(fbb.writeString).toList(growable: false));
          final idOffset = fbb.writeString(object.id);
          final titleOffset = fbb.writeString(object.title);
          final organizationOffset = fbb.writeString(object.organization);
          final cityOffset = fbb.writeString(object.city);
          fbb.startTable(19);
          fbb.addInt64(0, object.mockId);
          fbb.addOffset(1, eventImgOffset);
          fbb.addInt64(2, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(3, object.endDate.millisecondsSinceEpoch);
          fbb.addOffset(4, descriptionOffset);
          fbb.addBool(5, object.isFav);
          fbb.addOffset(6, categOffset);
          fbb.addOffset(7, tagsOffset);
          fbb.addOffset(8, idOffset);
          fbb.addOffset(9, titleOffset);
          fbb.addOffset(10, organizationOffset);
          fbb.addBool(13, object.isOnline);
          fbb.addBool(14, object.isPrivate);
          fbb.addInt64(16, object.creatorId);
          fbb.addOffset(17, cityOffset);
          fbb.finish(fbb.endTable());
          return object.mockId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Event(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 20, ''),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 30, false),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              const fb.ListReader<String>(
                      fb.StringReader(asciiOptimization: true),
                      lazy: false)
                  .vTableGet(buffer, rootOffset, 18, []),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 24, ''),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 32, false))
            ..mockId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..creatorId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 36, 0)
            ..city = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 38, '');

          return object;
        }),
    EventPromocodeInfo: EntityDefinition<EventPromocodeInfo>(
        model: _entities[3],
        toOneRelations: (EventPromocodeInfo object) => [],
        toManyRelations: (EventPromocodeInfo object) => {},
        getId: (EventPromocodeInfo object) => object.idMock,
        setId: (EventPromocodeInfo object, int id) {
          object.idMock = id;
        },
        objectToFB: (EventPromocodeInfo object, fb.Builder fbb) {
          final eventIdOffset = fbb.writeString(object.eventId);
          final idOffset = fbb.writeString(object.id);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(12);
          fbb.addInt64(0, object.idMock);
          fbb.addOffset(1, eventIdOffset);
          fbb.addOffset(2, idOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addBool(4, object.isLimited);
          fbb.addInt64(5, object.availableAmount);
          fbb.addBool(6, object.isPercentage);
          fbb.addFloat64(7, object.discount);
          fbb.addInt64(8, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(9, object.endDate.millisecondsSinceEpoch);
          fbb.addInt64(10, object.eventIdMock);
          fbb.finish(fbb.endTable());
          return object.idMock;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EventPromocodeInfo(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 16, false),
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 22, 0)))
            ..idMock =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..eventId = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..eventIdMock =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 24, 0);

          return object;
        }),
    EventTicketInfo: EntityDefinition<EventTicketInfo>(
        model: _entities[4],
        toOneRelations: (EventTicketInfo object) => [],
        toManyRelations: (EventTicketInfo object) => {},
        getId: (EventTicketInfo object) => object.idsMock,
        setId: (EventTicketInfo object, int id) {
          object.idsMock = id;
        },
        objectToFB: (EventTicketInfo object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final typeOffset = fbb.writeString(object.type);
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(10);
          fbb.addInt64(0, object.idsMock);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, typeOffset);
          fbb.addOffset(3, nameOffset);
          fbb.addInt64(4, object.ticketPrice);
          fbb.addInt64(5, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(6, object.endDate.millisecondsSinceEpoch);
          fbb.addInt64(7, object.avaliableQuantity);
          fbb.addInt64(8, object.selectedQuantity);
          fbb.finish(fbb.endTable());
          return object.idsMock;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = EventTicketInfo(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0)),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0)),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0))
            ..idsMock =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..selectedQuantity =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0);

          return object;
        }),
    OrderClass: EntityDefinition<OrderClass>(
        model: _entities[5],
        toOneRelations: (OrderClass object) => [],
        toManyRelations: (OrderClass object) => {},
        getId: (OrderClass object) => object.mockId,
        setId: (OrderClass object, int id) {
          object.mockId = id;
        },
        objectToFB: (OrderClass object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(10);
          fbb.addInt64(0, object.mockId);
          fbb.addInt64(1, object.userId);
          fbb.addInt64(2, object.eventId);
          fbb.addOffset(3, idOffset);
          fbb.addOffset(4, firstNameOffset);
          fbb.addOffset(5, lastNameOffset);
          fbb.addOffset(6, emailOffset);
          fbb.addFloat64(7, object.price);
          fbb.addInt64(8, object.creation_date.millisecondsSinceEpoch);
          fbb.finish(fbb.endTable());
          return object.mockId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = OrderClass(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 18, 0),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)))
            ..mockId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..userId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..eventId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0);

          return object;
        }),
    Ticket: EntityDefinition<Ticket>(
        model: _entities[6],
        toOneRelations: (Ticket object) => [],
        toManyRelations: (Ticket object) => {},
        getId: (Ticket object) => object.mockId,
        setId: (Ticket object, int id) {
          object.mockId = id;
        },
        objectToFB: (Ticket object, fb.Builder fbb) {
          final eventImgUrlOffset = fbb.writeString(object.eventImgUrl);
          final titleOffset = fbb.writeString(object.title);
          fbb.startTable(5);
          fbb.addInt64(0, object.mockId);
          fbb.addOffset(1, eventImgUrlOffset);
          fbb.addInt64(2, object.date.millisecondsSinceEpoch);
          fbb.addOffset(3, titleOffset);
          fbb.finish(fbb.endTable());
          return object.mockId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Ticket(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0)),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''))
            ..mockId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    TicketAttendee: EntityDefinition<TicketAttendee>(
        model: _entities[7],
        toOneRelations: (TicketAttendee object) => [],
        toManyRelations: (TicketAttendee object) => {},
        getId: (TicketAttendee object) => object.mockId,
        setId: (TicketAttendee object, int id) {
          object.mockId = id;
        },
        objectToFB: (TicketAttendee object, fb.Builder fbb) {
          final eventidOffset = fbb.writeString(object.eventid);
          final orderidOffset = fbb.writeString(object.orderid);
          final idOffset = fbb.writeString(object.id);
          final firstNameOffset = fbb.writeString(object.firstName);
          final lastNameOffset = fbb.writeString(object.lastName);
          final emailOffset = fbb.writeString(object.email);
          fbb.startTable(9);
          fbb.addInt64(0, object.mockId);
          fbb.addOffset(1, eventidOffset);
          fbb.addOffset(2, orderidOffset);
          fbb.addOffset(3, idOffset);
          fbb.addBool(4, object.isVip);
          fbb.addOffset(5, firstNameOffset);
          fbb.addOffset(6, lastNameOffset);
          fbb.addOffset(7, emailOffset);
          fbb.finish(fbb.endTable());
          return object.mockId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TicketAttendee(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 10, ''),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 12, false),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 14, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 16, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 18, ''))
            ..mockId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..eventid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 6, '')
            ..orderid = const fb.StringReader(asciiOptimization: true)
                .vTableGet(buffer, rootOffset, 8, '');

          return object;
        }),
    TicketClass: EntityDefinition<TicketClass>(
        model: _entities[8],
        toOneRelations: (TicketClass object) => [],
        toManyRelations: (TicketClass object) => {},
        getId: (TicketClass object) => object.mockId,
        setId: (TicketClass object, int id) {
          object.mockId = id;
        },
        objectToFB: (TicketClass object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final idOffset = fbb.writeString(object.id);
          fbb.startTable(11);
          fbb.addInt64(0, object.mockId);
          fbb.addInt64(1, object.eventId);
          fbb.addOffset(2, nameOffset);
          fbb.addBool(3, object.isVip);
          fbb.addFloat64(4, object.price);
          fbb.addInt64(5, object.maxQuantity);
          fbb.addInt64(6, object.availableQuantity);
          fbb.addInt64(7, object.startDate.millisecondsSinceEpoch);
          fbb.addInt64(8, object.endDate.millisecondsSinceEpoch);
          fbb.addOffset(9, idOffset);
          fbb.finish(fbb.endTable());
          return object.mockId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = TicketClass(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 22, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 10, false),
              const fb.Float64Reader().vTableGet(buffer, rootOffset, 12, 0),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 14, 0),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 18, 0)),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 20, 0)))
            ..mockId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..eventId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0)
            ..availableQuantity =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 16, 0);

          return object;
        }),
    UserLikesEvents: EntityDefinition<UserLikesEvents>(
        model: _entities[9],
        toOneRelations: (UserLikesEvents object) => [],
        toManyRelations: (UserLikesEvents object) => {},
        getId: (UserLikesEvents object) => object.mockId,
        setId: (UserLikesEvents object, int id) {
          object.mockId = id;
        },
        objectToFB: (UserLikesEvents object, fb.Builder fbb) {
          fbb.startTable(4);
          fbb.addInt64(0, object.mockId);
          fbb.addInt64(1, object.userId);
          fbb.addInt64(2, object.eventId);
          fbb.finish(fbb.endTable());
          return object.mockId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = UserLikesEvents(
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0),
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0))
            ..mockId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        }),
    LikedEventCardModel: EntityDefinition<LikedEventCardModel>(
        model: _entities[10],
        toOneRelations: (LikedEventCardModel object) => [],
        toManyRelations: (LikedEventCardModel object) => {},
        getId: (LikedEventCardModel object) => object.mockId,
        setId: (LikedEventCardModel object, int id) {
          object.mockId = id;
        },
        objectToFB: (LikedEventCardModel object, fb.Builder fbb) {
          final idOffset = fbb.writeString(object.id);
          final titleOffset = fbb.writeString(object.title);
          final eventImageUrlOffset = fbb.writeString(object.eventImageUrl);
          fbb.startTable(7);
          fbb.addInt64(0, object.mockId);
          fbb.addOffset(1, idOffset);
          fbb.addOffset(2, titleOffset);
          fbb.addInt64(3, object.startDate.millisecondsSinceEpoch);
          fbb.addOffset(4, eventImageUrlOffset);
          fbb.addBool(5, object.isOnline);
          fbb.finish(fbb.endTable());
          return object.mockId;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = LikedEventCardModel(
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 12, ''),
              const fb.BoolReader().vTableGet(buffer, rootOffset, 14, false))
            ..mockId =
                const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);

          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [Auth] entity fields to define ObjectBox queries.
class Auth_ {
  /// see [Auth.email]
  static final email = QueryStringProperty<Auth>(_entities[0].properties[0]);

  /// see [Auth.password]
  static final password = QueryStringProperty<Auth>(_entities[0].properties[1]);

  /// see [Auth.mockId]
  static final mockId = QueryIntegerProperty<Auth>(_entities[0].properties[2]);
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// see [User.email]
  static final email = QueryStringProperty<User>(_entities[1].properties[0]);

  /// see [User.imageUrl]
  static final imageUrl = QueryStringProperty<User>(_entities[1].properties[1]);

  /// see [User.firstName]
  static final firstName =
      QueryStringProperty<User>(_entities[1].properties[2]);

  /// see [User.lastName]
  static final lastName = QueryStringProperty<User>(_entities[1].properties[3]);

  /// see [User.mockId]
  static final mockId = QueryIntegerProperty<User>(_entities[1].properties[4]);
}

/// [Event] entity fields to define ObjectBox queries.
class Event_ {
  /// see [Event.mockId]
  static final mockId = QueryIntegerProperty<Event>(_entities[2].properties[0]);

  /// see [Event.eventImg]
  static final eventImg =
      QueryStringProperty<Event>(_entities[2].properties[1]);

  /// see [Event.startDate]
  static final startDate =
      QueryIntegerProperty<Event>(_entities[2].properties[2]);

  /// see [Event.endDate]
  static final endDate =
      QueryIntegerProperty<Event>(_entities[2].properties[3]);

  /// see [Event.description]
  static final description =
      QueryStringProperty<Event>(_entities[2].properties[4]);

  /// see [Event.isFav]
  static final isFav = QueryBooleanProperty<Event>(_entities[2].properties[5]);

  /// see [Event.categ]
  static final categ = QueryStringProperty<Event>(_entities[2].properties[6]);

  /// see [Event.tags]
  static final tags =
      QueryStringVectorProperty<Event>(_entities[2].properties[7]);

  /// see [Event.id]
  static final id = QueryStringProperty<Event>(_entities[2].properties[8]);

  /// see [Event.title]
  static final title = QueryStringProperty<Event>(_entities[2].properties[9]);

  /// see [Event.organization]
  static final organization =
      QueryStringProperty<Event>(_entities[2].properties[10]);

  /// see [Event.isOnline]
  static final isOnline =
      QueryBooleanProperty<Event>(_entities[2].properties[11]);

  /// see [Event.isPrivate]
  static final isPrivate =
      QueryBooleanProperty<Event>(_entities[2].properties[12]);

  /// see [Event.creatorId]
  static final creatorId =
      QueryIntegerProperty<Event>(_entities[2].properties[13]);

  /// see [Event.city]
  static final city = QueryStringProperty<Event>(_entities[2].properties[14]);
}

/// [EventPromocodeInfo] entity fields to define ObjectBox queries.
class EventPromocodeInfo_ {
  /// see [EventPromocodeInfo.idMock]
  static final idMock =
      QueryIntegerProperty<EventPromocodeInfo>(_entities[3].properties[0]);

  /// see [EventPromocodeInfo.eventId]
  static final eventId =
      QueryStringProperty<EventPromocodeInfo>(_entities[3].properties[1]);

  /// see [EventPromocodeInfo.id]
  static final id =
      QueryStringProperty<EventPromocodeInfo>(_entities[3].properties[2]);

  /// see [EventPromocodeInfo.name]
  static final name =
      QueryStringProperty<EventPromocodeInfo>(_entities[3].properties[3]);

  /// see [EventPromocodeInfo.isLimited]
  static final isLimited =
      QueryBooleanProperty<EventPromocodeInfo>(_entities[3].properties[4]);

  /// see [EventPromocodeInfo.availableAmount]
  static final availableAmount =
      QueryIntegerProperty<EventPromocodeInfo>(_entities[3].properties[5]);

  /// see [EventPromocodeInfo.isPercentage]
  static final isPercentage =
      QueryBooleanProperty<EventPromocodeInfo>(_entities[3].properties[6]);

  /// see [EventPromocodeInfo.discount]
  static final discount =
      QueryDoubleProperty<EventPromocodeInfo>(_entities[3].properties[7]);

  /// see [EventPromocodeInfo.startDate]
  static final startDate =
      QueryIntegerProperty<EventPromocodeInfo>(_entities[3].properties[8]);

  /// see [EventPromocodeInfo.endDate]
  static final endDate =
      QueryIntegerProperty<EventPromocodeInfo>(_entities[3].properties[9]);

  /// see [EventPromocodeInfo.eventIdMock]
  static final eventIdMock =
      QueryIntegerProperty<EventPromocodeInfo>(_entities[3].properties[10]);
}

/// [EventTicketInfo] entity fields to define ObjectBox queries.
class EventTicketInfo_ {
  /// see [EventTicketInfo.idsMock]
  static final idsMock =
      QueryIntegerProperty<EventTicketInfo>(_entities[4].properties[0]);

  /// see [EventTicketInfo.id]
  static final id =
      QueryStringProperty<EventTicketInfo>(_entities[4].properties[1]);

  /// see [EventTicketInfo.type]
  static final type =
      QueryStringProperty<EventTicketInfo>(_entities[4].properties[2]);

  /// see [EventTicketInfo.name]
  static final name =
      QueryStringProperty<EventTicketInfo>(_entities[4].properties[3]);

  /// see [EventTicketInfo.ticketPrice]
  static final ticketPrice =
      QueryIntegerProperty<EventTicketInfo>(_entities[4].properties[4]);

  /// see [EventTicketInfo.startDate]
  static final startDate =
      QueryIntegerProperty<EventTicketInfo>(_entities[4].properties[5]);

  /// see [EventTicketInfo.endDate]
  static final endDate =
      QueryIntegerProperty<EventTicketInfo>(_entities[4].properties[6]);

  /// see [EventTicketInfo.avaliableQuantity]
  static final avaliableQuantity =
      QueryIntegerProperty<EventTicketInfo>(_entities[4].properties[7]);

  /// see [EventTicketInfo.selectedQuantity]
  static final selectedQuantity =
      QueryIntegerProperty<EventTicketInfo>(_entities[4].properties[8]);
}

/// [OrderClass] entity fields to define ObjectBox queries.
class OrderClass_ {
  /// see [OrderClass.mockId]
  static final mockId =
      QueryIntegerProperty<OrderClass>(_entities[5].properties[0]);

  /// see [OrderClass.userId]
  static final userId =
      QueryIntegerProperty<OrderClass>(_entities[5].properties[1]);

  /// see [OrderClass.eventId]
  static final eventId =
      QueryIntegerProperty<OrderClass>(_entities[5].properties[2]);

  /// see [OrderClass.id]
  static final id = QueryStringProperty<OrderClass>(_entities[5].properties[3]);

  /// see [OrderClass.firstName]
  static final firstName =
      QueryStringProperty<OrderClass>(_entities[5].properties[4]);

  /// see [OrderClass.lastName]
  static final lastName =
      QueryStringProperty<OrderClass>(_entities[5].properties[5]);

  /// see [OrderClass.email]
  static final email =
      QueryStringProperty<OrderClass>(_entities[5].properties[6]);

  /// see [OrderClass.price]
  static final price =
      QueryDoubleProperty<OrderClass>(_entities[5].properties[7]);

  /// see [OrderClass.creation_date]
  static final creation_date =
      QueryIntegerProperty<OrderClass>(_entities[5].properties[8]);
}

/// [Ticket] entity fields to define ObjectBox queries.
class Ticket_ {
  /// see [Ticket.mockId]
  static final mockId =
      QueryIntegerProperty<Ticket>(_entities[6].properties[0]);

  /// see [Ticket.eventImgUrl]
  static final eventImgUrl =
      QueryStringProperty<Ticket>(_entities[6].properties[1]);

  /// see [Ticket.date]
  static final date = QueryIntegerProperty<Ticket>(_entities[6].properties[2]);

  /// see [Ticket.title]
  static final title = QueryStringProperty<Ticket>(_entities[6].properties[3]);
}

/// [TicketAttendee] entity fields to define ObjectBox queries.
class TicketAttendee_ {
  /// see [TicketAttendee.mockId]
  static final mockId =
      QueryIntegerProperty<TicketAttendee>(_entities[7].properties[0]);

  /// see [TicketAttendee.eventid]
  static final eventid =
      QueryStringProperty<TicketAttendee>(_entities[7].properties[1]);

  /// see [TicketAttendee.orderid]
  static final orderid =
      QueryStringProperty<TicketAttendee>(_entities[7].properties[2]);

  /// see [TicketAttendee.id]
  static final id =
      QueryStringProperty<TicketAttendee>(_entities[7].properties[3]);

  /// see [TicketAttendee.isVip]
  static final isVip =
      QueryBooleanProperty<TicketAttendee>(_entities[7].properties[4]);

  /// see [TicketAttendee.firstName]
  static final firstName =
      QueryStringProperty<TicketAttendee>(_entities[7].properties[5]);

  /// see [TicketAttendee.lastName]
  static final lastName =
      QueryStringProperty<TicketAttendee>(_entities[7].properties[6]);

  /// see [TicketAttendee.email]
  static final email =
      QueryStringProperty<TicketAttendee>(_entities[7].properties[7]);
}

/// [TicketClass] entity fields to define ObjectBox queries.
class TicketClass_ {
  /// see [TicketClass.mockId]
  static final mockId =
      QueryIntegerProperty<TicketClass>(_entities[8].properties[0]);

  /// see [TicketClass.eventId]
  static final eventId =
      QueryIntegerProperty<TicketClass>(_entities[8].properties[1]);

  /// see [TicketClass.name]
  static final name =
      QueryStringProperty<TicketClass>(_entities[8].properties[2]);

  /// see [TicketClass.isVip]
  static final isVip =
      QueryBooleanProperty<TicketClass>(_entities[8].properties[3]);

  /// see [TicketClass.price]
  static final price =
      QueryDoubleProperty<TicketClass>(_entities[8].properties[4]);

  /// see [TicketClass.maxQuantity]
  static final maxQuantity =
      QueryIntegerProperty<TicketClass>(_entities[8].properties[5]);

  /// see [TicketClass.availableQuantity]
  static final availableQuantity =
      QueryIntegerProperty<TicketClass>(_entities[8].properties[6]);

  /// see [TicketClass.startDate]
  static final startDate =
      QueryIntegerProperty<TicketClass>(_entities[8].properties[7]);

  /// see [TicketClass.endDate]
  static final endDate =
      QueryIntegerProperty<TicketClass>(_entities[8].properties[8]);

  /// see [TicketClass.id]
  static final id =
      QueryStringProperty<TicketClass>(_entities[8].properties[9]);
}

/// [UserLikesEvents] entity fields to define ObjectBox queries.
class UserLikesEvents_ {
  /// see [UserLikesEvents.mockId]
  static final mockId =
      QueryIntegerProperty<UserLikesEvents>(_entities[9].properties[0]);

  /// see [UserLikesEvents.userId]
  static final userId =
      QueryIntegerProperty<UserLikesEvents>(_entities[9].properties[1]);

  /// see [UserLikesEvents.eventId]
  static final eventId =
      QueryIntegerProperty<UserLikesEvents>(_entities[9].properties[2]);
}

/// [LikedEventCardModel] entity fields to define ObjectBox queries.
class LikedEventCardModel_ {
  /// see [LikedEventCardModel.mockId]
  static final mockId =
      QueryIntegerProperty<LikedEventCardModel>(_entities[10].properties[0]);

  /// see [LikedEventCardModel.id]
  static final id =
      QueryStringProperty<LikedEventCardModel>(_entities[10].properties[1]);

  /// see [LikedEventCardModel.title]
  static final title =
      QueryStringProperty<LikedEventCardModel>(_entities[10].properties[2]);

  /// see [LikedEventCardModel.startDate]
  static final startDate =
      QueryIntegerProperty<LikedEventCardModel>(_entities[10].properties[3]);

  /// see [LikedEventCardModel.eventImageUrl]
  static final eventImageUrl =
      QueryStringProperty<LikedEventCardModel>(_entities[10].properties[4]);

  /// see [LikedEventCardModel.isOnline]
  static final isOnline =
      QueryBooleanProperty<LikedEventCardModel>(_entities[10].properties[5]);
}
